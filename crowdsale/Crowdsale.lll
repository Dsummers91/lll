;;; Crowdsale contract written in LLL.. Practice..

(seq 

  ;; Memory Locations
  (def '*scratch1* 0x00)
  (def '*scratch2* 0x20)
  (def '*scratch3* 0x40)
  (def '*funcid*   0x60)

  ;; Storage Locations
  (def '*owner*            0x00)
  (def '*wei-multiplier*   0x01)
  (def '*crowdsale-state*  0x02)
  (def '*multisig*         0x03)
  (def '*max-supply*       0x04)

  ;; Function Hashes
  (def '*start-crowdsale*      0xa39953b2)
  (def '*get-address*          0x38cc4831)
  (def '*get-crowdsale-state*  0x2d3fb0d5)
  (def '*get-owner*            0x8da5cb5b)
  (def '*get-multisig*         0x4783c35b)
  (def '*get-max-supply*       0xd5abeb01)
  (def '*get-balance*          0x70a08231)
  (def '*get-wei-multiplier*   0x9975faa2)

  ;; Shifts the leftmost 4 bytes of a 32-byte number right by 28 bytes.
  (def 'shift-right (input)
    (div input (exp 2 224)))

  ;; Gets the function ID and stores it in memory for reference.
  (def 'get-function-id
    (mstore *funcid* (shift-right (calldataload 0x00))))
    
  (def 'function (function-hash code-body)
    (when (= (mload *funcid*) function-hash)
      code-body))

  (def 'balance-of (address)
    (address)
  )

  (when(callvalue)
    (panic))
  (sstore *owner* (caller))
  ;;; Store caller as 1000 for testing purposes..
  (sstore (balance-of (caller)) 1000)
  
  (codecopy *scratch1* (bytecodesize) 32)
  (sstore *multisig* (mload *scratch1*))

  (codecopy *scratch2* (+ (bytecodesize) 32) 32)
  (sstore *max-supply* (mload *scratch2*))
  
  (codecopy *scratch3* (+ (bytecodesize) 64) 32)
  (sstore *wei-multiplier* (mload *scratch3*)) ;; amount of tokens per wei eg. 1^18 wei is 5^18 tokens id multiplier is 5
  
  (returnlll 
    (seq
      get-function-id

      (function *start-crowdsale*
        (seq
          ;; only owner may start crowdsale
          (when (!= (caller) (sload *owner*))
            (revert 0 0))
          ;; Revert if state isnt 0
          (when (> (sload *crowdsale-state*) 0)
            (revert 0 0)) 
          (mstore *scratch1* (sload *crowdsale-state*))
          (mstore *scratch1* (add (mload *scratch1*) 1))
          (sstore *crowdsale-state* (mload *scratch1*))
      ))

      (function *get-crowdsale-state*
        (seq
          (return (sload *crowdsale-state*))
      ))

      (function *get-address* 
        (seq
          (return (caller))
      ))

      (function *get-owner*
        (seq
          (return (sload *owner*))
      ))


      (function *get-multisig*
        (seq
          (return (sload *multisig*))
      ))
      
      (function *get-wei-multiplier*
        (seq
          (return (sload *wei-multiplier*))
      ))

      (function *get-balance*
        (seq
          (return (sload (balance-of (caller))))
      ))

      (function *get-max-supply*
        (seq
          (return (sload *max-supply*))
      ))
      ;; FALLBACK FUNCTION
      ;; Only when crowdsale has started [crowdsale-state of 1]
      ;; Will send funds to multisig for now
      (when (!= (sload *crowdsale-state*) 1)
        (revert 0 0))
      ;; Send funds to multisig
      (call 21000 (sload *multisig*) (callvalue) 0 0 0 0)

)))
